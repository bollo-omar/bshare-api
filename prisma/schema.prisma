// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Contacts {
  email     String?
  phone     String?
  county    String?
  subcounty String?
  residence String?
  street    String?
  building  String?
  pincode   String?
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  firstName     String
  lastName      String
  role          UserRole        @default(USER)
  passwordHash  String
  subscriptions Subscription[] // A user can have many subscriptions
  copy          Copy[]
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  Borrower      Borrower[]
  BorrowRequest BorrowRequest[]
  Review        Review[]
  Notification  Notification[]
  Contacts      Contacts?
}

enum UserRole {
  ADMIN
  USER
}

model Subscription {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  user             User?            @relation(fields: [userId], references: [id])
  userId           String           @db.ObjectId
  subscriptionType SubscriptionType
  startDate        DateTime?        @default(now())
  endDate          DateTime?
  isActive         Boolean          @default(true)
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?        @updatedAt
}

enum SubscriptionType {
  BASIC
  PREMIUM
}

//  Define the Book model to store details of all books
model Book {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  publishedDate DateTime
  category      Category     @relation(fields: [categoryId], references: [id])
  categoryId    String       @db.ObjectId
  copies        Copy[] // A book can have many copies
  reviews       Review[] // A book can have many reviews
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt
  BookAuthor    BookAuthor[]
}

model Author {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  biography   String?
  nationality String?
  birthYear   Int?
  deathYear   Int?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
  BookAuthor  BookAuthor[]
}

model BookAuthor {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  bookId    String    @db.ObjectId
  authorId  String    @db.ObjectId
  book      Book      @relation(fields: [bookId], references: [id])
  author    Author    @relation(fields: [authorId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

// Define the Category model to store details of all book categories
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  books       Book[] // A category can have many books
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

// Define the Copy model to store details of each copy of a book
model Copy {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  book       Book            @relation(fields: [bookId], references: [id])
  bookId     String          @db.ObjectId
  owner      User            @relation(fields: [ownerId], references: [id])
  ownerId    String          @db.ObjectId
  language   String
  borrowedBy Borrower[] // A copy can be borrowed by many borrowers
  borrowReq  BorrowRequest[] // A copy can have many borrow requests
  createdAt  DateTime?       @default(now())
  updatedAt  DateTime?       @updatedAt
}

// Define the Borrower model to store details of each borrower of a book
model Borrower {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  member     User      @relation(fields: [memberId], references: [id])
  memberId   String    @db.ObjectId
  copy       Copy      @relation(fields: [copyId], references: [id])
  copyId     String    @db.ObjectId
  borrowedAt DateTime
  returnedAt DateTime?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model BorrowRequest {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  requester   User         @relation(fields: [requesterId], references: [id])
  requesterId String       @db.ObjectId
  copy        Copy         @relation(fields: [copyId], references: [id])
  copyId      String       @db.ObjectId
  requestedAt DateTime     @default(now())
  respondedAt DateTime?
  status      BorrowStatus @default(PENDING)
  message     String?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @updatedAt
}

enum BorrowStatus {
  PENDING
  APPROVED
  REJECTED
}

model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  book       Book      @relation(fields: [bookId], references: [id])
  bookId     String    @db.ObjectId
  reviewer   User      @relation(fields: [reviewerId], references: [id])
  reviewerId String    @db.ObjectId
  rating     Int
  comment    String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Notification {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  recipient   User      @relation(fields: [recipientId], references: [id])
  recipientId String    @db.ObjectId
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}
